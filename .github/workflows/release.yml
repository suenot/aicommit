name: Build and Release

on:
  push:
    tags:
      - 'v*'
  create:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux x86_64
          - os: ubuntu-22.04
            artifact_name: aicommit
            asset_name: aicommit-linux-x86_64
            target: x86_64-unknown-linux-gnu
          # Linux ARM64
          - os: ubuntu-latest
            container: archlinux:latest
            artifact_name: aicommit
            asset_name: aicommit-linux-aarch64
            target: aarch64-unknown-linux-gnu
            cross_compile: true
          # macOS Intel
          - os: macos-latest
            artifact_name: aicommit
            asset_name: aicommit-macos-x86_64
            target: x86_64-apple-darwin
          # macOS Apple Silicon
          - os: macos-latest
            artifact_name: aicommit
            asset_name: aicommit-macos-aarch64
            target: aarch64-apple-darwin
          # Windows x86_64
          - os: windows-latest
            artifact_name: aicommit.exe
            asset_name: aicommit-windows-x86_64
            target: x86_64-pc-windows-msvc
          # Windows ARM64
          - os: windows-latest
            artifact_name: aicommit.exe
            asset_name: aicommit-windows-aarch64
            target: aarch64-pc-windows-msvc

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross-compilation tools for ARM64
      if: matrix.cross_compile
      run: |
        if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          pacman -Syu --noconfirm
          pacman -S --noconfirm base-devel
          pacman -S --noconfirm aarch64-linux-gnu-gcc
          pacman -S --noconfirm aarch64-linux-gnu-binutils
          pacman -S --noconfirm openssl
          pacman -S --noconfirm pkg-config
        else
          sudo dpkg --add-architecture arm64
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          sudo apt-get install -y libc6-dev-arm64-cross
          sudo apt-get install -y libssl-dev:arm64
          sudo apt-get install -y pkg-config
        fi

    - name: Install build dependencies
      if: matrix.os == 'ubuntu-22.04' && !matrix.cross_compile
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc pkg-config libssl-dev

    - name: Build
      run: cargo build --release --target ${{ matrix.target }}
      env:
        CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
        PKG_CONFIG_ALLOW_CROSS: 1
        PKG_CONFIG_PATH: /usr/lib/aarch64-linux-gnu/pkgconfig
        OPENSSL_DIR: /usr
        OPENSSL_INCLUDE_DIR: /usr/include
        OPENSSL_LIB_DIR: ${{ matrix.cross_compile && '/usr/lib/aarch64-linux-gnu' || '/usr/lib/x86_64-linux-gnu' }}
        
    - name: Prepare asset
      shell: bash
      run: |
        cd target/${{ matrix.target }}/release
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          7z a ../../../${{ matrix.asset_name }}.zip ${{ matrix.artifact_name }}
        else
          tar -czf ../../../${{ matrix.asset_name }}.tar.gz ${{ matrix.artifact_name }}
        fi
        
    - name: Upload Release Asset
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          ${{ matrix.asset_name }}.*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}